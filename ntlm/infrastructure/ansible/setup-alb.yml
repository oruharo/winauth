---
- name: Setup Application Load Balancer Rules and SSL
  hosts: localhost
  gather_facts: false
  vars:
    aws_region: "ap-northeast-1"
    stack_name: "hashi-kerberos-test"
    domain_name: "winauth.example.com"  # このドメインは実際のものに変更してください

  tasks:
    - name: Get CloudFormation stack outputs
      amazon.aws.cloudformation_info:
        stack_name: "{{ stack_name }}"
        region: "{{ aws_region }}"
      register: cf_info

    - name: Set ALB variables from CloudFormation outputs
      set_fact:
        alb_arn: "{{ cf_info.cloudformation[stack_name].stack_outputs.ALBArn }}"
        https_listener_arn: "{{ cf_info.cloudformation[stack_name].stack_outputs.HTTPSListenerArn }}"
        nginx_target_group_arn: "{{ cf_info.cloudformation[stack_name].stack_outputs.NginxTargetGroupArn }}"
        springboot_target_group_arn: "{{ cf_info.cloudformation[stack_name].stack_outputs.SpringBootTargetGroupArn }}"
        alb_dns_name: "{{ cf_info.cloudformation[stack_name].stack_outputs.ALBDNSName }}"

    - name: Display ALB DNS name
      debug:
        msg: |
          ALB DNS Name: {{ alb_dns_name }}
          Access URL: https://{{ alb_dns_name }}

    # SSL証明書の作成（自己署名証明書またはACM使用）
    - name: Check if ACM certificate exists
      amazon.aws.aws_acm_info:
        domain_name: "{{ domain_name }}"
        region: "{{ aws_region }}"
      register: acm_cert
      ignore_errors: true

    - name: Request ACM certificate if not exists
      amazon.aws.aws_acm:
        domain_name: "{{ domain_name }}"
        subject_alt_name:
          - "{{ alb_dns_name }}"
        validation_method: DNS
        region: "{{ aws_region }}"
        wait: false
        state: present
      register: new_cert
      when: acm_cert.certificates | length == 0

    - name: Use existing certificate or new certificate ARN
      set_fact:
        certificate_arn: "{{ acm_cert.certificates[0].certificate_arn if acm_cert.certificates | length > 0 else new_cert.certificate.arn }}"

    - name: Add certificate to HTTPS listener
      amazon.aws.elb_application_lb_listener:
        load_balancer_arn: "{{ alb_arn }}"
        protocol: HTTPS
        port: 443
        ssl_policy: "ELBSecurityPolicy-TLS-1-2-2017-01"
        certificates:
          - certificate_arn: "{{ certificate_arn }}"
        default_actions:
          - type: forward
            target_group_arn: "{{ nginx_target_group_arn }}"
        state: present
      register: https_listener_result

    - name: Create ALB listener rule for API paths
      amazon.aws.elb_application_lb_listener_rule:
        listener_arn: "{{ https_listener_arn }}"
        priority: 100
        conditions:
          - field: path-pattern
            values:
              - "/api/*"
              - "/actuator/*"
        actions:
          - type: forward
            target_group_arn: "{{ springboot_target_group_arn }}"
        state: present

    - name: Create ALB listener rule for health check
      amazon.aws.elb_application_lb_listener_rule:
        listener_arn: "{{ https_listener_arn }}"
        priority: 200
        conditions:
          - field: path-pattern
            values:
              - "/health"
        actions:
          - type: forward
            target_group_arn: "{{ springboot_target_group_arn }}"
        state: present

    - name: Create ALB listener rule for root and static content (default to nginx)
      amazon.aws.elb_application_lb_listener_rule:
        listener_arn: "{{ https_listener_arn }}"
        priority: 300
        conditions:
          - field: path-pattern
            values:
              - "/*"
        actions:
          - type: forward
            target_group_arn: "{{ nginx_target_group_arn }}"
        state: present

    - name: Display final setup information
      debug:
        msg: |
          ALB setup completed!

          Access URLs:
          - Main application: https://{{ alb_dns_name }}/
          - API endpoints: https://{{ alb_dns_name }}/api/*
          - Health check: https://{{ alb_dns_name }}/health

          Note: If using ACM certificate with custom domain, make sure to:
          1. Complete DNS validation for the certificate
          2. Create CNAME record: {{ domain_name }} -> {{ alb_dns_name }}